SoC - separation of concerns
defer atribute
<script src="script2.js"></script>
async atribute
<script src="example.js" async></script>
DOM - document object model, wirtualna reprezentacja kodu html?

The Document Object Model, abbreviated DOM, is a powerful tree-like structure that allows programmers to conceptualize hierarchy and access the elements on a web page.

There are nine different types of node objects in the DOM tree.

Elements are the building units of HTML web pages, they contain everything between an opening tag and a closing tag. If the tag is a self-closing tag, then that is the element itself.

.innerHTML

The .querySelector() method allows us to specify a CSS selector and then returns the first element that matches that selector. 
document.querySelector('p');

Get element by id
document.getElementById('bio').innerHTML = 'The description';

Changing style with DOM:
document.querySelector('.blue').style.fontFamily = 'Roboto';



.createElement(tagName)
let paragraph = document.createElement('p');
paragraph.innerHTML = 'The text inside paragraph';
document.body.appendChild(paragraph);


variable.id



.removeChild() method removes a specified child from a parent.


różnice między hidden, display:none, ?? 

.removeChild() method removes a specified child from a parent.

.onclick property allows you to assign a function to run on a click event on an element:

.firstChild property will grant access to the first child of that parent element.

Each DOM element node has a .parentNode and .children property.

CSS property:
cursor: pointer;


event target - obiekt z DOM, na którym będzie wywoływany event
event handler property - np. eventTarget.onclick
event handler function to funkcja którą przypisujemy do eventTarget.onclick = eventFunction

!!It’s best practice to create named event handler functions, instead of anonymous functions.

addEventListener
eventTarget.addEventListener('click', eventHandlerFunction);
You’ll want to use the .addEventListener() method to allow multiple event handlers to be registered to a single event without changing its other event handlers.

The .removeEventListener() method is used reverse the .addEventListener() method.
eventTarget.removeEventListener('click', eventHandlerFunction);

event.target
event.type
event.timeStamp

!!
JavaScript engines register events as objects with properties and methods associated with them.
Event handlers are registered as properties of their event object.
Event object properties like .target, .type, and .timeStamp are used to provide information about the event.
The .addEventListener() method can be used to add multiple event handler functions to a single event.
The .removeEventListener() method stops specific event handlers from “listening” for specific events firing.


!!
Setting a style property equal to an empty string '' in JavaScript will return the element to its original style.

freesound - darmowy katalog dźwięków



handlebars

Inside a script, Handlebar expressions are wrapped with double braces, {{ }}

<script id="foo" type="text/x-handlebars-template">
  <p>{{bar}}</p>
</script>

const source = document.getElementById('foo').innerHTML;

const template = Handlebars.compile(source); //template is a function that when passed an object returns a completed/compiled template in a string.

const context = {
  bar: 'Text of the paragraph element'
};

const compiledHtml = template(context);


?? dlaczego type = x-handlebars-template // co robi ten x?

Handlebars:
{{#if}}
	{{#each}}

Promises are objects that represent the eventual outcome of an asynchronous operation. A Promise object can be in one of three states:

Pending: The initial state— the operation has not completed yet.
Fulfilled: The operation has completed successfully and the promise now has a resolved value. For example, a request’s promise might resolve with a JSON object as its value.
Rejected: The operation has failed and the promise has a reason for the failure. This reason is usually an Error of some kind

The Node setTimeout() Function

.then() zawszse zwraca promise

Remember, .then() will return a promise with the same settled value as the promise it was called on if no appropriate handler was provided.

different promise function: .catch().

.catch() accomplishes the same thing as using a .then() with only a failure handler.

process of chaining promises together is called composition. 


Promise.all() accepts an array of promises as its argument and returns a single promise. That single promise will settle in one of two ways:

If every promise in the argument array resolves, the single promise returned from Promise.all() will resolve with an array containing the resolve value from each promise in the argument array.
If any promise from the argument array rejects, the single promise returned from Promise.all() will immediately reject with the reason that promise rejected. This behavior is sometimes referred to as failing fast.

Promises info:
Promises are JavaScript objects that represent the eventual result of an asynchronous operation.
Promises can be in one of three states: pending, resolved, or rejected.
A promise is settled if it is either resolved or rejected.
We construct a promise by using the new keyword and passing an executor function to the Promise constructor method.
setTimeout() is a Node function which delays the execution of a callback function using the event-loop.
We use .then() with a success handler callback containing the logic for what should happen if a promise resolves.
We use .catch() with a failure handler callback containing the logic for what should happen if a promise rejects.
Promise composition enables us to write complex, asynchronous code that’s still readable. We do this by chaining multiple .then()‘s and .catch()‘s.
To use promise composition correctly, we have to remember to return promises constructed within a .then().
We should chain multiple promises rather than nesting them.
To take advantage of concurrency, we can use Promise.all().



async functions always return a promise.


The await keyword can only be used inside an async function



!!Tworzenie własnego atrybutu // data-id=
<div id="user" data-atrybut="1234567890" data-user="johndoe" data-date-of-birth>John Doe</div>

I dostęp do niego:
document.getElementById('user').dataset.atrybut

!! Pamiętać o zdarzeniu DOMContentLoaded


przydatne: e.preventDefault();

bubling/capture/wywołanie zdarzenia jeden raz:
element.addEventListener('click', doSomething, {
    capture: false, //czy używać fazy capture
    once: true, //po pierwszym odpaleniu nasłuchiwanie zostanie usunięte
    passive: false //jeżeli true, funkcja nigdy nie odpali preventDefault() nawet jeżeli podano je w funkcji
});

przerwanie bomeblkowania:
Aby przerwać powyższą wędrówkę, skorzystamy z metody e.stopPropagation().

Istnieje też metoda stopImmediatePropagation(), która także blokuje wędrówkę eventu danego typu. Różni się ona od stopPropagation tym, że poza blokadą wędrówki dodatkowo zatrzyma dla danego elementu wywołanie kolejnych funkcji nasłuchujących dany event.

!!Przydatne, sprawdza, czy dany obiekt ma rządaną klasę:
e.target.className.contains('.delete')



Możemy też odpalać inne typy eventów (ale i te powyższe). Aby odpalić takie eventy, musimy się posłużyć konstruktorem Event:
const img = document.querySelector('img');

const event = new Event("mousemove", {
    'bubbles'    : true, //czy zdarzenie ma iść w górę dokumentu
    'cancelable' : true  //czy można je zatrzymać
});
img.dispatchEvent(event);
//lub w skróconej wersji
img.dispatchEvent(new Event("mousemove"));



Istnieje kilka metod, które możemy wykorzystać do symulowania zachowania elementów:

element.click(); //kliknęliśmy w element
element.select(); //zaznaczamy element (tekst w inpucie)
element.focus(); //wybieramy element (jak za pomocą klawiatury)
element.blur(); //opuszczamy element

form.submit(); //wysyłamy formularz
form.reset(); //resetujemy formularz

Metoda: CustomEvent(eventName, detail, bubbles, cancelable).

Właściwość e.cancelable mówi nam, czy można zatrzymać event za pomocą preventDevault() // gdy false to można przerwać


callbacks/promisses/async funcitons crash curse:
 




Jest coś takiego jak Promise.resolve('tekst') //chyba zwraca resolved promise

API - aplication programing interface

!!Przydatne regular expressions:
new RegExp(coSzukasz, 'gi') // global, insesitive

promise.race() zwraca pierwszego promisa, który się wykonał

Promise.finally() // odpalana zawsze po zakończeniu promisa nieważne, czy pozytywnego czy nie:

fetch('....')
.then(res => res.json())
.then(res => console.log(res))
.catch(err => alert(err))
.finally(() => {
    btn.classList.remove("loading");
    btn.disabled = false;
});

//fetch

Wynika to z tego, że Promise zwracany przez Fetch nie zwraca reject gdy status połączenia jest niewłaściwy (404, 500 itp).

W then można korzystać z takiego zapisu:
return Promise.reject(resp)

<input type='submit'> ma też opcję 

Jak używać local storage na stronie:
localStorage.setItem('dania', JSON.stringify(items));

e.target.matches('input')) //przydatne wyrażenie

suwak: <input type='range'>

Document.documentElement returns the Element that is the root element of the document

//Inny sposób zmieniania stylu elementów za pomocą DOM:
elementZmieniany.style.setProperty(propertyName, value, priority);



!! bezpieczeństwo kodu:
"use strict"; Defines that JavaScript code should be executed in "strict mode".
The purpose of "use strict" is to indicate that the code should be executed in "strict mode".
With strict mode, you can not, for example, use undeclared variables.

Jak sprawdzić, czy jedną z klas elementu jest szukana klasa:
ev.target.className.indexOf('bar')!==-1


!!może przydać się do szachów
Return the size of an element and its position relative to the viewport:
var rect = obj.getBoundingClientRect();



//Czy można zmieniać rozmiar pola textarea?
poleTextarea.style.resize = 'none';

jak ustawić wysokość na 100%:
canvas.widht = window.innerHeight;




















